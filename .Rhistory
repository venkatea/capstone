irisData <- data.frame(iris)
irisdatadf <- irisData[1:4]
kmeansDF <- kmeans(irisdatadf, centers = 3, iter.max = 1000)
cluster.data <- data.frame(irisdatadf, kmeansDF$cluster)
View(cluster.data)
table(irisData[,5],kmeansDF$cluster )
library(EDR) # effective dimension reduction
install.packages(EDR)
library('EDR') # effective dimension reduction
install.packages('EDR')
library("EDR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library('EDR') # effective dimension reduction
library(dr)
install.packages('dr')
library('dr')
library('dr')
library(clustrd)
library('clustrd')
install.packages('clustrd')
library('clustrd')
library("clustrd", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("edrGraphicalTools")
library(edrGraphicalTools)
library(edrGraphicalTools)
demo(edr_ex1)
demo(edr_ex2)
demo(edr_ex3)
demo(edr_ex4)
install.packages("MetaPCA")
library(MetaPCA)
data(Spellman)
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x,
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x,           cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
metaPC <- MetaPCA(Spellman, method="Eigen", doPreprocess=FALSE)
metaPC <- MetaPCA(Spellman, method="Angle", doPreprocess=FALSE)
metaPC <- MetaPCA(Spellman, method="RobustAngle", doPreprocess=FALSE)
metaPC <- MetaPCA(Spellman, method="Eigen", doPreprocess=FALSE)
par(mfrow=c(2,4), cex=1, mar=c(0.2,0.2,0.2,0.2))
for(i in 1:4) {  plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")  text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)  lines(pc[[i]][,1], pc[[i]][,2])}
data(Spellman)
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x,           cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
metaPC <- MetaPCA(Spellman, method="Eigen", doPreprocess=FALSE)
par(mfrow=c(2,4), cex=1, mar=c(0.2,0.2,0.2,0.2))
for(i in 1:4) {  plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")  text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)  lines(pc[[i]][,1], pc[[i]][,2])}
library(MetaPCA)
data(Spellman)
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x,           cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x,           cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
metaPC <- MetaPCA(Spellman, method="Eigen", doPreprocess=FALSE)
par(mfrow=c(2,4), cex=1, mar=c(0.2,0.2,0.2,0.2))
for(i in 1:4) {  plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")  text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)  lines(pc[[i]][,1], pc[[i]][,2])}
metaPC <- MetaPCA(Spellman, method="Angle", doPreprocess=FALSE)
par(mfrow=c(2,4), cex=1, mar=c(0.2,0.2,0.2,0.2))
for(i in 1:4) {  plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")  text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)  lines(pc[[i]][,1], pc[[i]][,2])}
for(i in 1:4) {  plot(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")  text(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2], 1:nrow(metaPC$x[[i]]$coord), cex=1.5)  lines(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2])}
for(i in 1:4) {  plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")  text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)  lines(pc[[i]][,1], pc[[i]][,2])}
install.packages("MetaPCA")
install.packages("MetaPCA")
library(MetaPCA)
data(Spellman)
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x,           cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x, cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
metaPC <- MetaPCA(Spellman, method="Angle", doPreprocess=FALSE)
par(mfrow=c(2,4), cex=1, mar=c(0.2,0.2,0.2,0.2))
for(i in 1:4) {  plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")  text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)  lines(pc[[i]][,1], pc[[i]][,2])}
for(i in 1:4) {plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)lines(pc[[i]][,1], pc[[i]][,2])}
plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n"),text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5),lines(pc[[i]][,1], pc[[i]][,2])}
for(i in 1:4) {  plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")   text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)   lines(pc[[i]][,1], pc[[i]][,2])  }for(i in 1:4) {  plot(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")  text(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2], 1:nrow(metaPC$x[[i]]$coord), cex=1.5)  lines(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2])}
for(i in 1:4) {
for(i in 1:4) {
plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")
text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)
lines(pc[[i]][,1], pc[[i]][,2])
for(i in 1:4) {
plot(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")
text(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2], 1:nrow(metaPC$x[[i]]$coord), cex=1.5)
lines(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2])
}
install.packages("MetaPCA")
library(MetaPCA)
data(Spellman)
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x,
cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
library("MetaPCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(MetaPCA)
data(Spellman)
pc <- list(alpha=prcomp(t(Spellman$alpha))$x, cdc15=prcomp(t(Spellman$cdc15))$x,
cdc28=prcomp(t(Spellman$cdc28))$x, elu=prcomp(t(Spellman$elu))$x)
metaPC <- MetaPCA(Spellman, method="Eigen", doPreprocess=FALSE)
par(mfrow=c(2,4), cex=1, mar=c(0.2,0.2,0.2,0.2))
for(i in 1:4) {
plot(pc[[i]][,1], pc[[i]][,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")
text(pc[[i]][,1], pc[[i]][,2], 1:nrow(pc[[i]]), cex=1.5)
lines(pc[[i]][,1], pc[[i]][,2])
}
for(i in 1:4) {
plot(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2], type="n", xlab="", ylab="", xaxt="n", yaxt="n")
text(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2], 1:nrow(metaPC$x[[i]]$coord), cex=1.5)
lines(metaPC$x[[i]]$coord[,1], metaPC$x[[i]]$coord[,2])
}
data(prostate)
metaPC <- MetaPCA(prostate, method="Eigen", doPreprocess=FALSE, .scale=TRUE)
coord <- foreach(dd=iter(metaPC$x), .combine=rbind) %do% dd$coord
coord <- foreach(dd=iter(metaPC$x), .combine=rbind) %do% dd$coord
library("iterators", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
coord <- foreach(dd=iter(metaPC$x), .combine=rbind) %do% dd$coord
PlotPC2D(coord[,1:2], drawEllipse=F, dataset.name="Prostate", .class.order=c("Metastasis","Primary","Normal"),
.class.color=c('red','#838383','blue'), .annotation=T, newPlot=T,
.class2=rep(names(metaPC$x), times=sapply(metaPC$x,function(x)nrow(x$coord))),
.class2.order=names(metaPC$x), .points.size=1)
library(e1071)
library(rpart)
data(Ozone, package=“mlbench”)
data("Ozone", package="mlbench")
install.packages(mlbench)
install.packages("mlbench")
data("Ozone", package="mlbench")
index <- 1:nrow(Ozone)
testindex <- sample(index, trunc(length(index)/3))
testset <- na.omit(Ozone[testindex,-3])
trainset <- na.omit(Ozone[-testindex,-3])
View(Ozone)
svm.model <- svm(V4 ~ ., data = trainset, type=“C-classification”,cost = 1000, gamma = 0.0001)
svm.model <- svm(V4 ~ ., data = trainset, type="C-classification",cost = 1000, gamma = 0.0001)
svm.pred <- predict(svm.model, testset[,-3])
crossprod(svm.pred - testset[,3]) / length(testindex)
data(Glass, package="mlbench")
index <- 1:nrow(Glass)
testindex <- sample(index, trunc(length(index)/3))
testset <- Glass[testindex,]
trainset <- Glass[-testindex,]
svm.model <- svm(Type ~ ., data = trainset, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testset[,-10])
table(pred = svm.pred, true = testset[,10])
library(igraph)
g <- graph.full(nrow(dist.au))
V(g)$label <- city.names
layout <- layout.mds(g, dist = as.matrix(dist.au))
plot(g, layout = layout, vertex.size = 3)
library(igraph)
g <- graph.full(nrow(dist.au))
help("cmdscale")
v1 <- c(1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,4,5,6)
v2 <- c(1,2,1,1,1,1,2,1,2,1,3,4,3,3,3,4,6,5)
v3 <- c(3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,5,4,6)
v4 <- c(3,3,4,3,3,1,1,2,1,1,1,1,2,1,1,5,6,4)
v5 <- c(1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,6,4,5)
v6 <- c(1,1,1,2,1,3,3,3,4,3,1,1,1,2,1,6,5,4)
m1 <- cbind(v1,v2,v3,v4,v5,v6)
cor(m1)
factanal(m1, factors = 3) # varimax is the default
factanal(~v1+v2+v3+v4+v5+v6, factors = 3, scores = "Bartlett")$scores
library(ROCR)
library(randomForest)
library(neuralnet)
library(e1071)
library(pROC)
library(epiR)
install.packages('ROCR')
install.packages('pROC')
install.packages('epiR')
library(pROC)
library(epiR)
setwd("~/Documents/Capstone")
LeadData <- LeadData
LeadData <- read.csv("LeadData.csv")
LeadData$Op <- 1
LeadData$Op[LeadData$Opportunity.Name == ""] <- 0
LeadData$Employees <- as.factor(LeadData$Employees)
table(LeadData$Op)
prevalence <- .5
N <- 5000
tset <- LeadData[LeadData$Op==1,]
View(tset)
ntarget <- round(N*prevalence)
set.seed(576)
heads<-tset
heads<-heads[sample(nrow(heads),ntarget,replace=T),]
tails<-other
tails<-tails[sample(nrow(tails),N-ntarget,replace=T),]
other <- LeadData[LeadData$Op==0,]
tails<-other
tails<-tails[sample(nrow(tails),N-ntarget,replace=T),]
Lead <- rbind(heads,tails)
Lead <- model.matrix(~ Employees + Op, data = Lead)
colnames(Lead)[colnames(Lead)=="Employees100 - 1K"] <- "Employees1001k"
colnames(Lead)[colnames(Lead)=="Employees100K - 200K"] <- "Employees100k200k"
colnames(Lead)[colnames(Lead)=="Employees1K - 10K"] <- "Employees1k10k"
colnames(Lead)[colnames(Lead)=="Employees200K+"] <- "Employees200k"
colnames(Lead)[colnames(Lead)=="Employees50K - 100K"] <- "Employees50k100k"
colnames(Lead)[colnames(Lead)=="Employees10K - 50K"] <- "Employees10k50k"
colnames(Lead)[colnames(Lead)=="(Intercept)"] <- "Intercept"
Lead <- data.frame(Lead)
set.seed(100)
indexes = sample(1:nrow(Lead), size=0.2*nrow(Lead))
Test = Lead[indexes,]
Train = Lead[-indexes,]
LRmodel <- lm(Op ~ Employees1001k + Employees100k200k + Employees1k10k + Employees200k + Employees50k100k + Employees10k50k,data=Train)
summary(LRmodel)
View(Lead)
colnames(Lead)
colnames(Lead)[colnames(Lead)=="Employees100 - 1K"] <- "Employees1001k"
LRmodel <- lm(Op ~ Employees1001k + Employees100k200k + Employees1k10k + Employees200k + Employees50k100k + Employees10k50k,data=Train)
summary(LRmodel)
LRmodel <- lm(Op ~Employees100k200k + Employees1k10k + Employees200k + Employees50k100k + Employees10k50k,data=Train)
LRmodel <- lm(Op ~ Employees1k10k + Employees200k + Employees50k100k + Employees10k50k,data=Train)
LRmodel <- lm(Op ~ Employees1k10k + Employees50k100k + Employees10k50k,data=Train)
summary(LRmodel)
LRpredict <- predict(LRmodel,newdata=Test)
LRpredict[LRpredict>0.5] <- 1
LRpredict[LRpredict<0.5] <- 0
LRroccurve <- roc(Test$Op ~ LRpredict)
plot(LRroccurve)
LRAUC <- auc(LRroccurve)
